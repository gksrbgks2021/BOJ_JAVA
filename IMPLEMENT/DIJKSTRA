package temp;

import java.util.*;
import java.io.*;

class Node {
	private int index; // 정점
	private int distance; // weight;

	public Node(int index, int distance) {
		this.index = index;
		this.distance = distance;
	}

	public int getIndex() {
		return this.index;
	}

	public int getDistance() {
		return this.distance;
	}
}

public class Main {

	public static final int INF = (int) 1e9; // 무한을 의미하는 값 10억
	// 노드의 개수 N간선의 개수 M 시작 노드 start
	// 노드 개수는 최대 100,000 개라고 가정
	public static int n, m, start;
	// 각 노드에 연결되어 있는 노드에 대한 정보를 담는 배열
	public static ArrayList<ArrayList<Node>> graph = new ArrayList<ArrayList<Node>>();
	public static boolean[] visited = new boolean[1000001];
	// 최단 거리 테이블
	public static int[] d = new int[1000001];

	// 방문하지 않은 노드 중에서, 가장 최단 거리 짧은 노드 번호 반환 --> 우선순위 큐 로
	public static int getSmallestNode() {
		int min_value = INF;
		int index = 0; // 가장 최단 거리가 짧은 노드(인덱스)
		for (int i = 1; i <= n; i++) {
			if (d[i] < min_value && !visited[i]) {
				min_value = d[i];
				index = i;
			}
		}
		return index;
	}

	public static void dijkstra(int start) {// 시작 정점에 대해서 실행.
		d[start] = 0; // 자기 자신은 0으로 초기화
		visited[start] = true;
		// 시작 노드 인접 간선을 최신화해줌.
		for (int j = 0; j < graph.get(start).size(); j++) {
			d[graph.get(start).get(j).getIndex()] = graph.get(start).get(j).getDistance();
		}
		// 시작 노드를 제외한 전체 n -1 개의 노드에 대해 반복
		for (int i = 0; i < n - 1; i++) {
			// 현재 최단 거리가 가장 짧은노드 꺼내서 방문 처리.
			int now = getSmallestNode();
			visited[now] = true;
			// 현재 노드와 연결된 다른 노드 확인
			for (int j = 0; j < graph.get(now).size(); j++) {
				int cost = d[now] + graph.get(now).get(j).getDistance();
				if (cost < d[graph.get(now).get(j).getIndex()]) {
					d[graph.get(now).get(j).getIndex()] = cost;
				}
			}
		}
	}

	public static void main(String[] args) throws IOException {
		Scanner sc = new Scanner(System.in);
		n = sc.nextInt();
		m = sc.nextInt();
		start = sc.nextInt();

		// 그래프 초기ㅗ하
		for (int i = 0; i <= n; i++) {
			graph.add(new ArrayList<Node>());
		}

		// 모든 간선 정보를 입력받기
		for (int i = 0; i < m; i++) {
			int a = sc.nextInt();
			int b = sc.nextInt();
			int c = sc.nextInt();
			graph.get(a).add(new Node(b, c)); // a번 노드에서 b번 노드방향으로 가중치 c
		}
		
		Arrays.fill(d,  INF);
		//다익스트라 알고리즘 수행 
		dijkstra(start);
		 // 모든 노드로 가기 위한 최단 거리를 출력
        for (int i = 1; i <= n; i++) {
            // 도달할 수 없는 경우, 무한(INFINITY)이라고 출력
            if (d[i] == INF) {
                System.out.println("INFINITY");
            }
            // 도달할 수 있는 경우 거리를 출력
            else {
                System.out.println(d[i]);
            }
        }
	}

	public static class FastReader {
		BufferedReader br;
		StringTokenizer st;

		public FastReader() {
			br = new BufferedReader(new InputStreamReader(System.in));
		}

		public FastReader(String s) throws FileNotFoundException {
			br = new BufferedReader(new FileReader(new File(s)));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		String nextLine() {
			String str = "";
			try {
				str = br.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return str;
		}
	}
}